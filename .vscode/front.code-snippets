{
  "Component template": {
    "prefix": "component",
    "body": [
      "interface Props {",
      "  // id: string",
      "}",
      "",
      "export const ${TM_DIRECTORY/^.+\\/(.*)$/$1/} = ({}: Props): JSX.Element => {",
      "  return ${3:(null$1)}",
      "}",
      ""
    ]
  },
  "NextPage template": {
    "prefix": "nextpage",
    "body": [
      "const Component = () => {",
      "  return ${3:(null$1)}",
      "}",
      "",
      "export default Component"
    ]
  },
  "CustomHooks template": {
    "prefix": "hooks",
    "body": [
      "import { useState, useCallback } from 'react';",
      "",
      "export const use${TM_DIRECTORY/^.+\\/(.*)$/$1/} = () => {",
      "  const [state$1, setState$1] = useState('');",
      "",
      "  return { state$1, setState$1 };",
      "};"
    ]
  },
  "Storybook template": {
    "prefix": "storybook",
    "body": [
      "import { storiesOf } from '@storybook/react'",
      "",
      "import ${TM_DIRECTORY/^.+\\/(.*)$/$1/} from './'",
      "",
      "storiesOf('${TM_DIRECTORY/^.+\\/(.*)\\/(.*)$/$1/}', module)",
      "  .add('${1:${TM_DIRECTORY/^.+\\/(.*)$/$1/}}', () => <${1:${TM_DIRECTORY/^.+\\/(.*)$/$1/}} />)"
    ],
    "description": "Storybook template"
  },
  "HooksTest template": {
    "prefix": "hookstest",
    "body": [
      "if (process.env.NODE_ENV === 'test' && import.meta.vitest) {",
      "  const { renderHook, waitFor } = await import('@testing-library/react');",
      "  const { startTestServer } = await import('~/libs/msw/server');",
      "  const { mock } = await import('~/mocks');",
      "",
      "  describe('use${TM_DIRECTORY/^.+\\/(.*)$/$1/}', () => {",
      "    it('初期状態', async () => {",
      "      const { result } = renderHook(() => use${TM_DIRECTORY/^.+\\/(.*)$/$1/}());",
      "",
      "      expect(result.current.clusters).toStrictEqual([]);",
      "",
      "      await waitFor(() => {",
      "        expect(result.current.clusters).toStrictEqual(mock.cluster.clusters);",
      "        expect(result.current.isLoading).toStrictEqual(false);",
      "        expect(result.current.hasMore).toStrictEqual(false);",
      "      });",
      "    });",
      "  });",
      "}",
    ]
  }
}