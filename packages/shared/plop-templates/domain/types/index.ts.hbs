import {z} from 'zod';

export const create{{pascalCase name}}ParamsSchema = z.object({})

export type Create{{pascalCase name}}Params = z.infer<typeof create{{pascalCase name}}ParamsSchema>

export const create{{pascalCase name}}ReturnValueSchema = z.object({})

export type Create{{pascalCase name}}ReturnValue = z.infer<typeof create{{pascalCase name}}ReturnValueSchema>
    
export const update{{pascalCase name}}ParamsSchema = z.object({})

export type Update{{pascalCase name}}Params = z.infer<typeof update{{pascalCase name}}ParamsSchema>

export const update{{pascalCase name}}ReturnValueSchema = z.object({})

export type Update{{pascalCase name}}ReturnValue = z.infer<typeof update{{pascalCase name}}ReturnValueSchema>

export const delete{{pascalCase name}}ParamsSchema = z.object({})

export type Delete{{pascalCase name}}Params = z.infer<typeof delete{{pascalCase name}}ParamsSchema>

export const delete{{pascalCase name}}ReturnValueSchema = z.object({})

export type Delete{{pascalCase name}}ReturnValue = z.infer<typeof delete{{pascalCase name}}ReturnValueSchema>