import { useBrowserStorage } from "shared/libs/hooks/storage";
import {
  type Props,
  type {{pascalCase name}}FormValues,
  {{camelCase name}}FormValuesSchema,
} from "../types";
import { useI18n } from "shared/libs/i18n/client";
import { useForm } from "@conform-to/react";
import { parseWithZod } from "@conform-to/zod";
import { useActionState, useCallback, useMemo, type FormEvent } from "react";

const empty{{pascalCase name}}FormValues: {{pascalCase name}}FormValues = {
  id: "",
};

const use{{pascalCase name}}FormStorage = ({
  defaultValues,
}: { defaultValues?: {{pascalCase name}}FormValues }) => {
  const key = defaultValues ? `{{camelCase name}}Form?id=${defaultValues.id}` : "{{camelCase name}}Form";
  return useBrowserStorage<{{pascalCase name}}FormValues>(
    key,
    defaultValues || empty{{pascalCase name}}FormValues,
  );
};

export const use{{pascalCase name}}Form = ({ action: serverAction, defaultValues, enableAutoSave }: Props) => {
  const { get, set, remove } = use{{pascalCase name}}FormStorage({ defaultValues });
  const { data } = get;
  const [lastResult, action, isPending] = useActionState(
    async (_: unknown, formData: FormData) => {
      const submission = parseWithZod(formData, {
        schema: {{camelCase name}}FormValuesSchema,
      });

      if (submission.status !== "success") {
        return submission.reply();
      }
      await serverAction(submission.value);
      await remove();
      return submission.reply();
    },
    undefined,
  );
  const defaultValue = useMemo(
    () => enableAutoSave ? data : defaultValues,
    [enableAutoSave, data, defaultValues],
  );

  const [form, fields] = useForm({
    lastResult,
    onValidate: ({ formData }) => {
      return parseWithZod(formData, { schema: {{camelCase name}}FormValuesSchema });
    },
    defaultValue,
  });
  const t = useI18n();

  const onChange = useCallback(
    (event: FormEvent<HTMLFormElement>) => {
      if (!enableAutoSave) return;
      const formData = new FormData(event.currentTarget);
      const object = Object.fromEntries(formData.entries());
      const values: {{pascalCase name}}FormValues = { ...object }
      set(values);
    },
    [enableAutoSave, set],
  );

  return { action, form, fields, t, isPending, onChange };
};