import { type Props, {{camelCase name}}FormValuesSchema } from "../types";
import { useI18n } from "shared/libs/i18n/client";
import { useForm } from "@conform-to/react";
import { parseWithZod } from "@conform-to/zod";
import { useActionState, useCallback, type FormEvent } from "react";

export const use{{pascalCase name}}Form = ({ action: serverAction, defaultValues }: Props) => {
  const [lastResult, action, isPending] = useActionState(
    async (_: unknown, formData: FormData) => {
      const submission = parseWithZod(formData, {
        schema: {{camelCase name}}FormValuesSchema,
      });

      if (submission.status !== "success") {
        return submission.reply();
      }
      await serverAction(submission.value);
    },
    undefined,
  );

  const [form, fields] = useForm({
    lastResult,
    onValidate: ({ formData }) => {
      return parseWithZod(formData, { schema: {{camelCase name}}FormValuesSchema });
    },
    defaultValue: defaultValues,
  });
  const t = useI18n();

  const onChange = useCallback((event: FormEvent<HTMLFormElement>) => {
    const formData = new FormData(event.currentTarget);
    const values = Object.fromEntries(formData.entries());
    console.log(values);
  }, []);

  return { action, form, fields, t, isPending, onChange };
};
